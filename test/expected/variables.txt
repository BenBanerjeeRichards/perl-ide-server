Use
Name(warnings)
;
Use
Name(strict)
;
ScalarVariable($hello)
Assignment
NumericLiteral(2)
;
ScalarVariable($_Hello)
Assignment
NumericLiteral(3)
;
HashVariable(%hello)
Assignment
NumericLiteral(3)
;
ArrayVariable(@_83Hel34)
Assignment
NumericLiteral(5)
;
ScalarVariable($H3ello)
Assignment
NumericLiteral(54)
;
ScalarVariable($::::'foo)
;
ScalarVariable($foo::'bar)
;
ScalarVariable($Hello::world::thing)
;
ScalarVariable($World::Hello'thing)
;
ScalarVariable($1)
Assignment
NumericLiteral(2)
;
ScalarVariable($0)
Assignment
NumericLiteral(3)
;
ScalarVariable($20384)
Assignment
NumericLiteral(23)
;
ScalarVariable($!)
;
ScalarVariable($?)
;
ScalarVariable($^)
;
ScalarVariable($^A)
;
ScalarVariable($^B)
;
ScalarVariable($^?)
;
ScalarVariable($^^)
;
ScalarVariable(${^HE34LLO})
;
ScalarVariable(${^Hello})
;
ScalarVariable(${^_Hell2o})
;
Comment(# Single dereferences)
Deref($)
ScalarVariable($hello)
;
Comment(# Multiple dereferences)
Deref($)
Deref($)
ScalarVariable($hello)
;
Deref(%)
Deref($)
ScalarVariable($hello)
;
Comment(# Use $# for array size)
ScalarVariable($#array)
;
ScalarVariable($#$array_ref)
;
Comment(# These are not valid and should not be interpreted as variables)
Name($)
LBracket
Name(Hello)
RBracket
;
ScalarVariable($:)
Operator(:)
StringStart(')
String(::foo;\n$foo)
StringEnd(')
Operator(:)
Operator(:)
Name(bar)
;
Name($)
LBracket
Operator(^)
Name(Hello)
;
EndOfInput
