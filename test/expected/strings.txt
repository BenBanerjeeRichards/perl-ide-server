Comment(#!/usr/bin/perl)
Use
Name(feature)
StringStart(")
String(say)
StringEnd(")
;
Builtin(say)
QuoteIdent(qq)
StringStart(H)
String(\Hello World!)
StringEnd(H)
;
Builtin(say)
QuoteIdent(qw)
StringStart(@)
String(Hello \@ World)
StringEnd(@)
;
Builtin(say)
QuoteIdent(q)
StringStart({)
String(Hello!)
StringEnd(})
;
Builtin(say)
QuoteIdent(qr)
StringStart(")
String(Hello)
StringEnd(")
;
Builtin(say)
QuoteIdent(qr)
StringStart({)
String(Hi!)
StringEnd(})
;
Builtin(say)
QuoteIdent(qr)
StringStart(()
String(Helllo)
StringEnd())
;
QuoteIdent(tr)
StringStart(T)
String(l)
StringEnd(T)
String(x)
StringEnd(T)
;
Builtin(say)
QuoteIdent(qq)
StringStart({)
String(Hello {World} \{)
StringEnd(})
;
QuoteIdent(s)
StringStart(/)
String(Hello)
StringEnd(/)
String(World)
StringEnd(/)
;
QuoteIdent(s)
StringStart(W)
String(THing)
StringEnd(W)
String(Are)
StringEnd(W)
;
QuoteIdent(s)
StringStart({)
String(Hello)
StringEnd(})
StringStart({)
String(Wor{}sld)
StringEnd(})
StringModifiers(i)
;
ScalarVariable($subject)
Operator(=~)
QuoteIdent(s)
StringStart({)
String(A)
StringEnd(})
StringStart({)
String(B)
StringEnd(})
StringModifiers(gi)
;
ScalarVariable($event)
Operator(=~)
QuoteIdent(s)
StringStart({)
String(C)
StringEnd(})
StringStart({)
String(D)
StringEnd(})
StringModifiers(gi)
;
QuoteIdent(q)
StringStart({)
String(Hello)
StringEnd(})
;
QuoteIdent(q)
StringStart(Z)
String(HEllo {} World)
StringEnd(Z)
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
StringStart({)
String(World)
StringEnd(})
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
StringStart({)
String(World)
StringEnd(})
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
StringStart(/)
String(World)
StringEnd(/)
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
StringStart(/)
String(World)
StringEnd(/)
;
QuoteIdent(tr)
StringStart(/)
String(Hello)
StringEnd(/)
String(World)
StringEnd(/)
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
Comment(#World)
StringStart({)
String(World)
StringEnd(})
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
Comment(#World)
Comment(# World!)
StringStart({)
String(World)
StringEnd(})
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
StringStart(<)
String(World)
StringEnd(>)
;
QuoteIdent(tr)
StringStart({)
String(Hello)
StringEnd(})
StringStart(!)
String(World)
StringEnd(!)
;
QuoteIdent(s)
StringStart(/)
String(\n    Hello\n    World\n   )
StringEnd(/)
String(\n    Indeed!\n\n)
StringEnd(/)
;
ScalarVariable($program)
Operator(=~)
QuoteIdent(s)
StringStart({)
String(\n    /\*	# Match the opening delimiter.\n        .*?	# Match a minimal number of characters.\n        \*/	# Match the closing delimiter.\n)
StringEnd(})
StringStart([)
StringEnd(])
StringModifiers(gsx)
;
QuoteIdent(tr)
StringStart(/)
StringEnd(/)
StringEnd(/)
;
QuoteIdent(tr)
StringStart({)
StringEnd(})
StringStart([)
StringEnd(])
;
My
ScalarVariable($x)
Assignment
NumericLiteral(50)
;
Comment(#)
Sub
SubName(clean_and_trim_subject)
LBracket({)
Deref($)
ScalarVariable($ref)
Operator(=~)
QuoteIdent(s)
StringStart(/)
String(\n.*)
StringEnd(/)
StringEnd(/)
StringModifiers(s)
;
RBracket
My
ScalarVariable($event_eat)
Assignment
LSquareBracket
QuoteIdent(qw)
StringStart([)
String(head title style layer applet object xml param base)
StringEnd(])
RSquareBracket
;
My
ScalarVariable($event_remove)
Assignment
LSquareBracket
QuoteIdent(qw)
StringStart([)
String(bgsound embed object link body meta noscript plaintext noframes)
StringEnd(])
RSquareBracket
;
QuoteIdent(s)
StringStart(W)
String(Hello)
StringEnd(W)
String(orld)
StringEnd(W)
StringModifiers(sdxx)
;
QuoteIdent(qr)
StringStart(/)
String(Hello)
StringEnd(/)
StringModifiers(xs)
;
QuoteIdent(m)
StringStart(/)
String(pattern)
StringEnd(/)
StringModifiers(sxx)
;
QuoteIdent(m)
StringStart({)
String(Pattern)
StringEnd(})
StringModifiers(sxx)
;
StringStart(/)
String(Hello)
StringEnd(/)
StringModifiers(s)
;
QuoteIdent(tr)
StringStart(/)
String(hello)
StringEnd(/)
String(world)
StringEnd(/)
StringModifiers(cdsr)
;
QuoteIdent(y)
StringStart(/)
String(world)
StringEnd(/)
String(helllo)
StringEnd(/)
StringModifiers(cdsr)
;
QuoteIdent(s)
StringStart(/)
String(PATTERN)
StringEnd(/)
String(REPLACEMENT)
StringEnd(/)
StringModifiers(msixpodualngcer)
;
QuoteIdent(m)
StringStart(/)
String(PATTERN)
StringEnd(/)
StringModifiers(msixpodualngc)
;
StringStart(/)
String(PATTERN)
StringEnd(/)
StringModifiers(msixpodualngc)
;
QuoteIdent(qr)
StringStart(/)
String(STRING)
StringEnd(/)
StringModifiers(msixpodualn)
;
QuoteIdent(m)
StringStart(/)
String(PATTERN)
StringEnd(/)
StringModifiers(msixpongc)
;
StringStart(/)
String(PATTERN)
StringEnd(/)
StringModifiers(msixplngc)
;
QuoteIdent(q)
StringStart({)
String(\)
StringEnd(})
;
QuoteIdent(q)
StringStart({)
String(\{)
StringEnd(})
;
QuoteIdent(q)
StringStart({)
String(\})
StringEnd(})
;
QuoteIdent(s)
Comment(# Test)
Comment(# World)
StringStart({)
String(^([^\r\n]*)You \s+ should \s+ have \s+ received\n    .*? (write \s+ to | contact .*? Foundation)\n)
StringEnd(})
Comment(# Comment!)
Comment(# Comment!)
StringStart({)
String(x)
StringEnd(})
StringModifiers(smix)
;
Builtin(say)
QuoteIdent(s)
Comment(#WOrld)
Comment(#Hello)
StringStart({)
String(Hello)
StringEnd(})
StringStart({)
String(World)
StringEnd(})
;
Builtin(say)
QuoteIdent(qq)
StringStart(W)
String(Hello)
StringEnd(W)
;
EndOfInput
